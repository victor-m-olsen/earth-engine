/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var aoi = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[44.262755498391044, 15.464366150108598],
          [44.262755498391044, 14.613582399929497],
          [45.424559697609794, 14.613582399929497],
          [45.424559697609794, 15.464366150108598]]], null, false),
    imageVisParamVV = {"opacity":1,"bands":["VV"],"min":-19.357365985896017,"max":1.024067959421476,"gamma":1},
    imageVisParamVH = {"opacity":1,"bands":["VH"],"min":-30.227026791562913,"max":-9.927704849072141,"gamma":1},
    water = 
    /* color: #4e8ed6 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Point([45.239867999882094, 15.394116401468732]),
            {
              "class": 1,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Point([45.242357089847914, 15.392461368639056]),
            {
              "class": 1,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Point([45.24038298401295, 15.389068510193324]),
            {
              "class": 1,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Point([45.23368819031178, 15.388985756857416]),
            {
              "class": 1,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Point([45.228366687626234, 15.38857198968443]),
            {
              "class": 1,
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Point([45.221843555302016, 15.385510087045144]),
            {
              "class": 1,
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Point([45.222616031498305, 15.381703334490375]),
            {
              "class": 1,
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Point([45.22047026428639, 15.375910316667559]),
            {
              "class": 1,
              "system:index": "7"
            }),
        ee.Feature(
            ee.Geometry.Point([45.22347433838307, 15.37235166871047]),
            {
              "class": 1,
              "system:index": "8"
            }),
        ee.Feature(
            ee.Geometry.Point([45.23051245483815, 15.367137725924039]),
            {
              "class": 1,
              "system:index": "9"
            }),
        ee.Feature(
            ee.Geometry.Point([45.23154242309987, 15.364406560990984]),
            {
              "class": 1,
              "system:index": "10"
            }),
        ee.Feature(
            ee.Geometry.Point([45.23051245483815, 15.361592596068359]),
            {
              "class": 1,
              "system:index": "11"
            }),
        ee.Feature(
            ee.Geometry.Point([45.23952467712819, 15.36614457917872]),
            {
              "class": 1,
              "system:index": "12"
            }),
        ee.Feature(
            ee.Geometry.Point([45.23918135437428, 15.368379152702502]),
            {
              "class": 1,
              "system:index": "13"
            }),
        ee.Feature(
            ee.Geometry.Point([45.237121417850844, 15.370365420170538]),
            {
              "class": 1,
              "system:index": "14"
            }),
        ee.Feature(
            ee.Geometry.Point([45.23463232788502, 15.362916819585447]),
            {
              "class": 1,
              "system:index": "15"
            }),
        ee.Feature(
            ee.Geometry.Point([45.229568317264906, 15.377317207235437]),
            {
              "class": 1,
              "system:index": "16"
            }),
        ee.Feature(
            ee.Geometry.Point([45.23248656067311, 15.382199871378617]),
            {
              "class": 1,
              "system:index": "17"
            }),
        ee.Feature(
            ee.Geometry.Point([45.23737890991627, 15.385841105717608]),
            {
              "class": 1,
              "system:index": "18"
            }),
        ee.Feature(
            ee.Geometry.Point([44.322012261554406, 15.64897864595143]),
            {
              "class": 1,
              "system:index": "19"
            }),
        ee.Feature(
            ee.Geometry.Point([44.32235558430831, 15.648565399808973]),
            {
              "class": 1,
              "system:index": "20"
            }),
        ee.Feature(
            ee.Geometry.Point([44.32306368748824, 15.648565399808973]),
            {
              "class": 1,
              "system:index": "21"
            }),
        ee.Feature(
            ee.Geometry.Point([44.32669536594061, 15.646390200133547]),
            {
              "class": 1,
              "system:index": "22"
            }),
        ee.Feature(
            ee.Geometry.Point([44.327274723087825, 15.646782788163426]),
            {
              "class": 1,
              "system:index": "23"
            }),
        ee.Feature(
            ee.Geometry.Point([44.32042760947917, 15.656780478679238]),
            {
              "class": 1,
              "system:index": "24"
            }),
        ee.Feature(
            ee.Geometry.Point([44.32019157508586, 15.657772228173299]),
            {
              "class": 1,
              "system:index": "25"
            }),
        ee.Feature(
            ee.Geometry.Point([44.31979237581821, 15.65932439458098]),
            {
              "class": 1,
              "system:index": "26"
            }),
        ee.Feature(
            ee.Geometry.Point([44.815004422482964, 15.538577372199091]),
            {
              "class": 1,
              "system:index": "27"
            }),
        ee.Feature(
            ee.Geometry.Point([44.81436069231939, 15.539300939953085]),
            {
              "class": 1,
              "system:index": "28"
            }),
        ee.Feature(
            ee.Geometry.Point([44.814746930417535, 15.53787447537661]),
            {
              "class": 1,
              "system:index": "29"
            }),
        ee.Feature(
            ee.Geometry.Point([44.81354530077886, 15.540210564381786]),
            {
              "class": 1,
              "system:index": "30"
            }),
        ee.Feature(
            ee.Geometry.Point([44.81337363940191, 15.540872106898545]),
            {
              "class": 1,
              "system:index": "31"
            }),
        ee.Feature(
            ee.Geometry.Point([44.78762263727778, 15.270316271231781]),
            {
              "class": 1,
              "system:index": "32"
            }),
        ee.Feature(
            ee.Geometry.Point([44.78702182245844, 15.26961246707795]),
            {
              "class": 1,
              "system:index": "33"
            }),
        ee.Feature(
            ee.Geometry.Point([44.78610987139338, 15.26888796033661]),
            {
              "class": 1,
              "system:index": "34"
            }),
        ee.Feature(
            ee.Geometry.Point([44.786699957376655, 15.269188113432893]),
            {
              "class": 1,
              "system:index": "35"
            }),
        ee.Feature(
            ee.Geometry.Point([44.25842459705537, 15.591777185949844]),
            {
              "class": 1,
              "system:index": "36"
            }),
        ee.Feature(
            ee.Geometry.Point([44.258488970071724, 15.591322488247773]),
            {
              "class": 1,
              "system:index": "37"
            }),
        ee.Feature(
            ee.Geometry.Point([44.25930436161225, 15.591198479608819]),
            {
              "class": 1,
              "system:index": "38"
            }),
        ee.Feature(
            ee.Geometry.Point([44.25928290394013, 15.591012466509962]),
            {
              "class": 1,
              "system:index": "39"
            }),
        ee.Feature(
            ee.Geometry.Point([44.257437544137886, 15.593099937175806]),
            {
              "class": 1,
              "system:index": "40"
            }),
        ee.Feature(
            ee.Geometry.Point([44.258682089120796, 15.591281152043107]),
            {
              "class": 1,
              "system:index": "41"
            }),
        ee.Feature(
            ee.Geometry.Point([45.222632674105476, 14.228775527054724]),
            {
              "class": 1,
              "system:index": "42"
            }),
        ee.Feature(
            ee.Geometry.Point([45.222546843417, 14.22963870026706]),
            {
              "class": 1,
              "system:index": "43"
            }),
        ee.Feature(
            ee.Geometry.Point([45.22262194526942, 14.230231479960793]),
            {
              "class": 1,
              "system:index": "44"
            }),
        ee.Feature(
            ee.Geometry.Point([45.22255757225306, 14.232248999192983]),
            {
              "class": 1,
              "system:index": "45"
            }),
        ee.Feature(
            ee.Geometry.Point([45.222171334154915, 14.233933717942202]),
            {
              "class": 1,
              "system:index": "46"
            }),
        ee.Feature(
            ee.Geometry.Point([45.22262194526942, 14.231895414650332]),
            {
              "class": 1,
              "system:index": "47"
            }),
        ee.Feature(
            ee.Geometry.Point([45.20718098877916, 14.25132331231676]),
            {
              "class": 1,
              "system:index": "48"
            }),
        ee.Feature(
            ee.Geometry.Point([45.207996380319685, 14.249701115752655]),
            {
              "class": 1,
              "system:index": "49"
            }),
        ee.Feature(
            ee.Geometry.Point([45.208210957040876, 14.24895240571197]),
            {
              "class": 1,
              "system:index": "50"
            }),
        ee.Feature(
            ee.Geometry.Point([45.2066660046483, 14.25136490694708]),
            {
              "class": 1,
              "system:index": "51"
            }),
        ee.Feature(
            ee.Geometry.Point([44.41486271415259, 14.566932886264416]),
            {
              "class": 1,
              "system:index": "52"
            }),
        ee.Feature(
            ee.Geometry.Point([44.415742478709475, 14.566849814631876]),
            {
              "class": 1,
              "system:index": "53"
            }),
        ee.Feature(
            ee.Geometry.Point([44.41366108451392, 14.565749112546035]),
            {
              "class": 1,
              "system:index": "54"
            }),
        ee.Feature(
            ee.Geometry.Point([44.413789830546634, 14.566745975047194]),
            {
              "class": 1,
              "system:index": "55"
            }),
        ee.Feature(
            ee.Geometry.Point([45.07058394669182, 14.292917918817066]),
            {
              "class": 1,
              "system:index": "56"
            }),
        ee.Feature(
            ee.Geometry.Point([45.07099164246208, 14.292647603456256]),
            {
              "class": 1,
              "system:index": "57"
            }),
        ee.Feature(
            ee.Geometry.Point([45.07135642288811, 14.293437755136189]),
            {
              "class": 1,
              "system:index": "58"
            }),
        ee.Feature(
            ee.Geometry.Point([45.07152808426506, 14.29424869739462]),
            {
              "class": 1,
              "system:index": "59"
            }),
        ee.Feature(
            ee.Geometry.Point([45.07073415039665, 14.291628719560677]),
            {
              "class": 1,
              "system:index": "60"
            }),
        ee.Feature(
            ee.Geometry.Point([45.071957237707444, 14.291857449000243]),
            {
              "class": 1,
              "system:index": "61"
            }),
        ee.Feature(
            ee.Geometry.Point([45.07135642288811, 14.290360306628932]),
            {
              "class": 1,
              "system:index": "62"
            }),
        ee.Feature(
            ee.Geometry.Point([45.070948727117845, 14.29150395795015]),
            {
              "class": 1,
              "system:index": "63"
            }),
        ee.Feature(
            ee.Geometry.Point([45.07150662659294, 14.29175348110201]),
            {
              "class": 1,
              "system:index": "64"
            }),
        ee.Feature(
            ee.Geometry.Point([45.070455200659104, 14.292626809953521]),
            {
              "class": 1,
              "system:index": "65"
            })]),
    imageVisParam2 = {"opacity":1,"bands":["red","green","blue"],"min":200.72,"max":2875.28,"gamma":1.7180000000000002},
    geometry2 = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[44.12201292163692, 15.579037146051983],
                  [44.1275919163879, 15.570190479695722],
                  [44.13334257251583, 15.563327850181414],
                  [44.145444699591025, 15.559358996093346],
                  [44.16149503833614, 15.554067071566934],
                  [44.14776212817989, 15.566965899166252],
                  [44.1535986149963, 15.569777074761236],
                  [44.15085203296505, 15.579037146051983],
                  [44.1330343013476, 15.584957761337572],
                  [44.12179048115717, 15.600086722267932],
                  [44.10059030110346, 15.600500066208069],
                  [44.09526879841791, 15.596945281115506],
                  [44.09629876667963, 15.589339487645931],
                  [44.09707124287592, 15.58041058804244],
                  [44.10479600483881, 15.57842633543095],
                  [44.11749894673334, 15.583469606610935]]]),
            {
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[43.90948713092253, 15.270840850925909],
                  [43.908542993349286, 15.263968326553549],
                  [43.946995141786786, 15.260076556356404],
                  [43.95265996722624, 15.268688036169403],
                  [43.95643651751921, 15.28284652812782],
                  [43.9300864961569, 15.29054635931665],
                  [43.91849935321257, 15.292533366610941],
                  [43.906311395448895, 15.27738196025614]]]),
            {
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[43.87362378149399, 14.46247118012979],
                  [43.88306515722641, 14.46247118012979],
                  [43.8942660620726, 14.462554290951113],
                  [43.89984505682358, 14.46380094953949],
                  [43.90413659124741, 14.477098205686614],
                  [43.904222421935884, 14.480006874285884],
                  [43.892249040893404, 14.481211882963361],
                  [43.88482468634018, 14.482126023111233],
                  [43.87362378149399, 14.477596837297215],
                  [43.86632817297348, 14.473275326118571],
                  [43.86637108831772, 14.46762399224634],
                  [43.86718647985825, 14.462720512500455]]]),
            {
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[43.966728981647066, 14.448667082779469],
                  [43.969260986957124, 14.432708238554234],
                  [43.97217923036533, 14.42514401164428],
                  [43.97462540498691, 14.422650254156766],
                  [43.98260765901523, 14.427679303136198],
                  [43.97861653200107, 14.44434500883671],
                  [43.97612744203525, 14.451409893827215]]]),
            {
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[44.074827884808634, 14.170642584532125],
                  [44.072081302777384, 14.150752386822871],
                  [44.09336731351957, 14.143178673851317],
                  [44.110275959149455, 14.1433451317933],
                  [44.11757156766996, 14.16182120556525],
                  [44.12632629789457, 14.17122511635799],
                  [44.12795708097563, 14.176967135751214]]]),
            {
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[44.47506580158706, 15.445914899803455],
                  [44.477125738110495, 15.381540453769807],
                  [44.68552264973159, 15.379719806961434],
                  [44.684321020092916, 15.445253053304812]]]),
            {
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[43.88108921976752, 14.388865451671995],
                  [43.88452244730658, 14.387077970937739],
                  [43.888105878550476, 14.385332045713334],
                  [43.89402819605536, 14.383981022781855],
                  [43.89977885218329, 14.385581464438006],
                  [43.903898725230164, 14.390341151729832],
                  [43.893105516154236, 14.394643489191187],
                  [43.88896418543524, 14.39507995357691],
                  [43.87947989435858, 14.392481938703689]]]),
            {
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[43.91059736233769, 14.394087126141994],
                  [43.90702465992985, 14.38765435747443],
                  [43.907968797503095, 14.387342586918322],
                  [43.909985818682294, 14.390023799478191],
                  [43.9122925184351, 14.39313105593262],
                  [43.91206721287785, 14.394055950004088]]]),
            {
              "system:index": "7"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[43.928588396874595, 14.281557222736433],
                  [43.94000387844198, 14.304762717686618],
                  [43.91743040737264, 14.315241833398682],
                  [43.90652990993612, 14.305178564925942],
                  [43.90481329616659, 14.286880558632362],
                  [43.91622877773397, 14.283719843131154]]]),
            {
              "system:index": "8"
            })]),
    imageVisParam6 = {"opacity":1,"bands":["red","green","blue"],"min":200.72,"max":2875.28,"gamma":1.7970000000000002},
    ALOS = ee.ImageCollection("JAXA/ALOS/AW3D30/V3_2"),
    water_map_v1 = ee.Image("users/reachyemengis/water/water_map_v1"),
    water_map_v2 = ee.Image("users/reachyemengis/water/water_map_v2"),
    waterVis = {"opacity":1,"bands":["classification"],"palette":["2b64ff"]},
    geometry = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Point([45.163307819443645, 14.232617698618387]),
    imageVisParam = {"opacity":1,"bands":["water"],"palette":["ff2a08"]},
    train2020Jan = ee.FeatureCollection("users/reachyemengis/water/Train-2020-Jan"),
    geometry3 = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[44.425392841692044, 15.479887709368349],
          [44.425392841692044, 14.136310362426306],
          [45.859108662004544, 14.136310362426306],
          [45.859108662004544, 15.479887709368349]]], null, false),
    geometry4 = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[45.0503349252015, 15.505127175568306],
          [45.0503349252015, 15.199548490101318],
          [45.41631698086556, 15.199548490101318],
          [45.41631698086556, 15.505127175568306]]], null, false),
    table = ee.FeatureCollection("users/reachyemengis/Admin0"),
    table2 = ee.FeatureCollection("users/reachyemengis/water/JRC_sample_2019_700"),
    point_sample = ee.FeatureCollection("users/reachyemengis/point_samples/2019_1000"),
    feature_sample = ee.FeatureCollection("users/reachyemengis/feature_samples/2019"),
    geometry5 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.LinearRing(
            [[42.77889286609313, 16.42751988500983],
             [42.807731977421255, 16.29047970724141],
             [42.85854374499938, 15.992351351299103],
             [42.82558476062438, 15.884070411124469],
             [42.77614628406188, 15.788946414315175],
             [42.70473515124938, 15.689135405592404],
             [42.703361860233755, 15.638888422433258],
             [42.777519575077505, 15.474838946852135],
             [42.81734501453063, 15.354364930279946],
             [42.81644142531342, 15.26374373521956],
             [42.79927528761811, 15.235257591952973],
             [42.7659729804892, 15.229626153272868],
             [42.75430000685639, 15.244201331767705],
             [42.744686969747015, 15.270036664524264],
             [42.710698017110296, 15.276660596787567],
             [42.694218524922796, 15.268380648787671],
             [42.69833839796967, 15.239895134150538],
             [42.72065437697358, 15.21273093327309],
             [42.7659729804892, 15.198484891051676],
             [42.78622902296967, 15.194509079573],
             [42.82914436720795, 15.171646710015683],
             [42.891997479878626, 15.142728062032175],
             [42.92564310976144, 15.037316073980737],
             [42.97331111947689, 14.927366509569456],
             [42.996657066742515, 14.843088900023863],
             [42.969191246430015, 14.725576344674867],
             [42.96232479135189, 14.707645117863457],
             [42.99459713021908, 14.660485606565276],
             [43.00833004037533, 14.612651504463686],
             [43.06387223721303, 14.413481565698309],
             [43.11468400479116, 14.163289636225793],
             [43.15450944424428, 13.992787990563347],
             [43.17098893643178, 13.96213752438016],
             [43.22454728604116, 13.935481630673694],
             [43.296111610814776, 13.729871530795897],
             [43.2920776757155, 13.658009451076245],
             [43.286584511653, 13.628649555524007],
             [43.28274240529082, 13.429354031175192],
             [43.29510202443144, 13.219551474092894],
             [43.52307409917791, 12.858899669682161],
             [43.50522131597479, 12.73837429658005],
             [43.51208777105291, 12.715601938830593],
             [43.54916662847479, 12.739713783356006],
             [43.57663244878729, 12.783912870958327],
             [43.75104040777166, 12.734355793779459],
             [43.97626013433416, 12.668711245304738],
             [44.32782263433416, 12.686128797368832],
             [44.45416540777166, 12.734355793779459],
             [44.503391445997316, 12.776555675566886],
             [44.54493349921997, 12.811207380014714],
             [44.62592002766875, 12.834343706956583],
             [44.71381065266875, 12.812249546656847],
             [44.82642051595, 12.804214825950142],
             [44.88787528889922, 12.81794065213736],
             [44.93044731038359, 12.841373260180148],
             [44.97267600911406, 12.842377466023166],
             [44.98836290853766, 12.855264418084081],
             [45.00338327902106, 12.851749860365775],
             [45.02312433737067, 12.846477931569902],
             [45.03247988241461, 12.850410968296687],
             [45.082767944775824, 12.929409400427065],
             [45.112980347119574, 12.996324075585232],
             [45.210694882866306, 13.057935061547505],
             [45.381194836733485, 13.212604607303556],
             [45.452605969545985, 13.314190703334047],
             [45.927019964367794, 13.424268065214664],
             [46.229143987805294, 13.461666693712106],
             [46.59581268897717, 13.450981966792929],
             [46.863604437024044, 13.537781547362409],
             [47.173578474340914, 13.632366850914043],
             [47.45235655051279, 13.749782616713993],
             [47.640497419653414, 13.913799120268104],
             [47.95020733108128, 14.086098087162826],
             [48.187786676784405, 14.092757978322233],
             [48.65882549514378, 14.104745292622464],
             [48.84559307326878, 14.244550603083349],
             [49.18616924514378, 14.623583647642752],
             [49.41413555373753, 14.729862156761794],
             [49.39834270705784, 14.685364315809377],
             [49.42512188186253, 14.680050534888661],
             [49.486919977565655, 14.733846595256232],
             [49.93117962112034, 14.86197373226537],
             [49.365152211517405, 16.177116654106456],
             [47.486490102142405, 15.299446523408477],
             [46.921821641757546, 17.170577003118616],
             [45.828681993320046, 17.453769427450926],
             [43.646930349628576, 17.609223574810162],
             [42.779010427753576, 16.795880309069133],
             [42.77889286609313, 16.42751988500983]]),
        {
          "system:index": "0"
        }),
    geometry6 = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.MultiPoint(),
    geometry7 = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                42.78404233854522,
                16.791977325894408
              ],
              [
                42.78953550260772,
                16.399785201169585
              ],
              [
                42.83073423307647,
                16.191522182867338
              ],
              [
                42.86369321745147,
                15.972477211120117
              ],
              [
                42.75382993620147,
                15.76376569330076
              ],
              [
                42.69889829557647,
                15.684451734051953
              ],
              [
                42.72636411588897,
                15.594525303944366
              ],
              [
                42.81434601676567,
                15.375328129469807
              ],
              [
                42.81709259879692,
                15.262083429813044
              ],
              [
                42.79580658805473,
                15.230284442624614
              ],
              [
                42.76490754020317,
                15.23160949643401
              ],
              [
                42.753234566570356,
                15.244859575506633
              ],
              [
                42.74156159293754,
                15.269370019917849
              ],
              [
                42.70860260856254,
                15.272682022710024
              ],
              [
                42.692809761882856,
                15.261420999990726
              ],
              [
                42.69967621696098,
                15.223659048442478
              ],
              [
                42.72370880973442,
                15.212395399872896
              ],
              [
                42.81709259879692,
                15.17926353322691
              ],
              [
                42.89537018668754,
                15.14148686444658
              ],
              [
                43.00941807586335,
                14.845273243497761
              ],
              [
                42.9846988375821,
                14.765611458066981
              ],
              [
                42.9737125094571,
                14.701860996480164
              ],
              [
                43.03139073211335,
                14.558354502939029
              ],
              [
                43.11928135711335,
                14.231131246856144
              ],
              [
                43.1659732516446,
                13.964745804820044
              ],
              [
                43.22914463836335,
                13.924761261827188
              ],
              [
                43.29506260711335,
                13.714062245137658
              ],
              [
                43.27858311492585,
                13.632665637838711
              ],
              [
                43.2868228610196,
                13.545900677487186
              ],
              [
                43.282702987972726,
                13.386972135256515
              ],
              [
                43.29376906575717,
                13.19672316348841
              ],
              [
                43.38028639974154,
                13.077699035917432
              ],
              [
                43.44345778646029,
                12.985382332764136
              ],
              [
                43.51074904622592,
                12.83680095177914
              ],
              [
                43.50113600911654,
                12.724302540045333
              ],
              [
                43.52310866536654,
                12.708227255325285
              ],
              [
                43.58765334310092,
                12.771182966085851
              ],
              [
                43.71399611653842,
                12.737697832781846
              ],
              [
                43.983505239526345,
                12.674161848458498
              ],
              [
                44.189498891870095,
                12.671482176689045
              ],
              [
                44.392745962182595,
                12.700957015130413
              ],
              [
                44.47377013210447,
                12.749181195087758
              ],
              [
                44.503124227563454,
                12.775466205980562
              ],
              [
                44.521320333520485,
                12.792206826224687
              ],
              [
                44.5468978786865,
                12.812963652924191
              ],
              [
                44.61865233425291,
                12.828028020782767
              ],
              [
                44.76977244560536,
                12.798221159019
              ],
              [
                44.87414256279286,
                12.811612536314499
              ],
              [
                44.90572825615224,
                12.825672716472742
              ],
              [
                44.98107399600843,
                12.8410445313722
              ],
              [
                44.9903437103639,
                12.853094752373377
              ],
              [
                45.025705954016246,
                12.844726604662606
              ],
              [
                45.045961996496715,
                12.854433630133746
              ],
              [
                45.11236325238734,
                12.996935098734644
              ],
              [
                45.297757539496715,
                13.093260292428303
              ],
              [
                45.51885739301234,
                13.253718488106596
              ],
              [
                45.59850827191859,
                13.345934131501293
              ],
              [
                45.78704212668646,
                13.392422859813866
              ],
              [
                45.85628452960273,
                13.397191754483629
              ],
              [
                45.86950245562812,
                13.398360681618042
              ],
              [
                45.87177696887275,
                13.397066511953769
              ],
              [
                45.876454741394724,
                13.398527670744958
              ],
              [
                45.96415515052043,
                13.418477919754418
              ],
              [
                46.015310240852465,
                13.424989864575037
              ],
              [
                46.05444903479778,
                13.428830159483505
              ],
              [
                46.260042399359605,
                13.451446165791728
              ],
              [
                46.460542887640855,
                13.440760982987847
              ],
              [
                46.56628629584398,
                13.44343232335067
              ],
              [
                46.765413493109605,
                13.48082795999369
              ],
              [
                46.89312955756273,
                13.534240146177945
              ],
              [
                47.133455485297105,
                13.607662327685587
              ],
              [
                47.37103483100023,
                13.691736115548798
              ],
              [
                47.63050086844116,
                13.889124298240827
              ],
              [
                47.846107557894285,
                13.994418274563058
              ],
              [
                47.97382362234741,
                14.071692045644319
              ],
              [
                48.25122840750366,
                14.058370841069895
              ],
              [
                48.47420103586041,
                14.061848400602383
              ],
              [
                48.67470152414166,
                14.080497586020503
              ],
              [
                48.83674986398541,
                14.226973780037532
              ],
              [
                49.00429136789166,
                14.42390097164865
              ],
              [
                49.14162046945416,
                14.612681158825767
              ],
              [
                49.33662779367291,
                14.668486589084447
              ],
              [
                49.51240904367291,
                14.729590500049282
              ],
              [
                49.94636900461041,
                14.894219897714821
              ],
              [
                46.982315793699144,
                17.20167283071691
              ],
              [
                46.323136106199144,
                17.390484430710313
              ],
              [
                44.048966184324144,
                17.704736913916733
              ],
              [
                43.093155637449144,
                17.421934154001693
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                47.81072021259566,
                16.62748258830537
              ],
              [
                49.43325677229233,
                15.335974909767868
              ],
              [
                50.02514520002671,
                14.878565128839286
              ],
              [
                50.07870354963608,
                14.89847292350848
              ],
              [
                50.27783074690171,
                14.967472350799891
              ],
              [
                50.56622186018296,
                15.06032111000058
              ],
              [
                51.11004510237046,
                15.178313209929692
              ],
              [
                51.35287527572174,
                15.281372566998485
              ],
              [
                51.49432425033112,
                15.31713738054649
              ],
              [
                51.59182791244049,
                15.370111048214683
              ],
              [
                51.78683523665924,
                15.472047428713283
              ],
              [
                52.01205496322174,
                15.558058577044235
              ],
              [
                52.18875609866121,
                15.653581965909947
              ],
              [
                52.13657104006746,
                15.862407130307295
              ],
              [
                52.115971674833084,
                15.98786272625271
              ],
              [
                52.184636225614334,
                16.10928160228809
              ],
              [
                52.2524868924047,
                16.24924731970837
              ],
              [
                52.43513459748282,
                16.440326808330923
              ],
              [
                52.70979280060782,
                16.54698610813254
              ],
              [
                53.00409841150574,
                16.697843795080097
              ],
              [
                52.08674001306824,
                18.389535078646272
              ],
              [
                50.254738395391634,
                18.455739616381425
              ],
              [
                49.040749137579134,
                18.351495191443856
              ],
              [
                48.601296012579134,
                17.933891053289884
              ],
              [
                47.815773551641634,
                17.436705283201764
              ],
              [
                47.365334098516634,
                16.943415544925497
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                53.40673345881412,
                12.639087699323106
              ],
              [
                53.41497320490787,
                12.57207827733197
              ],
              [
                53.39300054865787,
                12.531864227102254
              ],
              [
                53.33394903498599,
                12.529183067109079
              ],
              [
                53.44381231623599,
                12.468849606463158
              ],
              [
                53.54543585139224,
                12.399113444396638
              ],
              [
                53.57015508967349,
                12.354848115688279
              ],
              [
                53.70199102717349,
                12.310575294972294
              ],
              [
                53.80224127131412,
                12.32399209091377
              ],
              [
                53.99312872248599,
                12.34948211169979
              ],
              [
                54.14693731623599,
                12.377652404068783
              ],
              [
                54.24032110529849,
                12.45544026025587
              ],
              [
                54.33370489436099,
                12.467508703057115
              ],
              [
                54.47515386897037,
                12.53990753973229
              ],
              [
                54.25680059748599,
                12.624347130892602
              ],
              [
                54.19362921076724,
                12.656507274708828
              ],
              [
                54.16616339045474,
                12.653827417400203
              ],
              [
                54.09749883967349,
                12.685983846173958
              ],
              [
                54.00411505061099,
                12.639087699323106
              ],
              [
                53.89150518732974,
                12.608265542050955
              ],
              [
                53.82970709162662,
                12.584141266006064
              ],
              [
                53.72671026545474,
                12.604244987030318
              ],
              [
                53.64705938654849,
                12.665886553594452
              ],
              [
                53.57427496272037,
                12.683304298788977
              ],
              [
                53.50423712092349,
                12.671245986628508
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    yem_aoi_large = 
    /* color: #d63000 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[42.66287063252482, 16.690679401152146],
                  [42.61892532002482, 15.741259888464317],
                  [42.48708938252482, 15.328446994965722],
                  [42.65188430439982, 14.59609717158587],
                  [43.23415969502482, 13.017156462488813],
                  [43.36599563252482, 12.685111813400582],
                  [43.653459419291536, 12.51411819125339],
                  [44.312639106791536, 12.524843290412223],
                  [45.109147895854036, 12.680306931615995],
                  [45.718889106791536, 13.194262529791432],
                  [46.498918403666536, 13.338619889712687],
                  [47.262468208354036, 13.440153086106404],
                  [47.987565864604036, 13.947168384418575],
                  [48.383073677104036, 13.883184926205649],
                  [48.855485786479036, 14.043110285802276],
                  [49.800060123501645, 14.55457886284331],
                  [50.959117740689145, 14.905211979599809],
                  [52.409313053189145, 15.567717271170597],
                  [52.458751529751645, 16.09091583733048],
                  [53.095958561001645, 16.496899794485657],
                  [53.5109453628131, 16.727075176616673],
                  [53.3131914565631, 17.084467062502426],
                  [52.04354617496867, 19.362035838564907],
                  [48.57186648746867, 18.86376374556641],
                  [47.60506961246867, 18.19709686833015],
                  [47.25350711246867, 17.318224926212935],
                  [44.08944461246867, 17.862798466061374],
                  [43.41004884798515, 17.735252411917752],
                  [42.9513696487664, 17.468217598732604]]]),
            {
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[53.33109909617357, 12.623289014747272],
                  [53.24595505320482, 12.50801488801473],
                  [53.36955124461107, 12.347081347253143],
                  [53.68266159617357, 12.231684668297177],
                  [54.35832077586107, 12.328299294939427],
                  [54.56980759226732, 12.54823266136752],
                  [54.29514938914232, 12.714399266468538],
                  [54.08640915476732, 12.714399266468538],
                  [53.84470993601732, 12.658129132021244],
                  [53.68815476023607, 12.725115975529027],
                  [53.44370895945482, 12.74922691543814]]]),
            {
              "system:index": "1"
            })]),
    table3 = ee.FeatureCollection("users/reachyemengis/feature_samples/2019_1000_yem"),
    table4 = ee.FeatureCollection("users/reachyemengis/feature_samples/2019_1000_yem_v2"),
    table5 = ee.FeatureCollection("users/reachyemengis/feature_samples/2019_1000_yem_v3"),
    geometry8 = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[47.53996911095873, 17.620628848445644],
          [47.53996911095873, 15.154489516564727],
          [51.09953942345873, 15.154489516564727],
          [51.09953942345873, 17.620628848445644]]], null, false),
    table6 = ee.FeatureCollection("users/reachyemengis/feature_samples/2019_1000_yem_v4"),
    table7 = ee.FeatureCollection("users/reachyemengis/feature_samples/2019_1000_yem_v6"),
    table8 = ee.FeatureCollection("users/reachyemengis/feature_samples/2019_1000_yem_v7"),
    table9 = ee.FeatureCollection("users/reachyemengis/feature_samples/2019_1000_yem_v9"),
    table10 = ee.FeatureCollection("users/reachyemengis/feature_samples/2019_1000_yem_v10"),
    costal_land = ee.FeatureCollection("users/reachyemengis/point_samples/costal_land"),
    certain_comission_errors = ee.FeatureCollection("users/reachyemengis/point_samples/certain_comission_errors"),
    agri_water_errors = ee.FeatureCollection("users/reachyemengis/point_samples/agri_water_errors"),
    table11 = ee.FeatureCollection("users/reachyemengis/feature_samples/2019_1000_yem_v11");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// var hillshadow = function(img) {
//   var shadowMap = ee.Terrain.hillShadow({
//   image: dem,
//   azimuth: img.get('MEAN_SOLAR_AZIMUTH_ANGLE'),
//   zenith: img.get('MEAN_SOLAR_ZENITH_ANGLE'),
//   neighborhoodSize: 0,
//   hysteresis: true});
//   return img.addBands(shadowMap.clip(img.geometry()));
// };


// var yem = table.first().geometry().buffer({
//   distance: -100,
//   maxError: 99
//   }) 





// Defining AOI

var yem_aoi_fc = yem_aoi_large.toList(2, 0)

var clip_feature = ee.Geometry.MultiPolygon([ee.Feature(yem_aoi_fc.get(0)).geometry(), ee.Feature(yem_aoi_fc.get(1)).geometry()])



// ee.Feature(ee.FeatureCollection('users/reachyemengis/water/JRC_AOI').first()).geometry();  ///SELECT AOI
// print(clip_feature)
// Map.addLayer(clip_feature, '', 'clip_featurtraie', false)



/////////////////////////// Loading Imagery //////////////////////////////////////////////

// Filters
var start = ee.Date('2020-01-01');
var end = ee.Date('2020-12-31');

// Loading and filtering imageCollections
var sentinel2 = ee.ImageCollection('COPERNICUS/S2_SR')
                    .filterDate(start, end)
                    .filterBounds(clip_feature);
var dem = ee.Image('USGS/SRTMGL1_003');
var elevation = dem.select('elevation');
var slope = ee.Terrain.slope(elevation);
var HAND = ee.Image("MERIT/Hydro/v1_0_1").select('hnd');


var sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD')
                  .sort('system:time_start')
                  .filterBounds(clip_feature.buffer(4000))  //Geometry, not feature!!   sen1_selection
                  .filterDate(start, end)
                  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
                  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                  .filter(ee.Filter.eq('instrumentMode', 'IW'))
                  .select(['VV', 'VH']);
                  // .map(function(image) {
                  //   return image.unitScale(-30, 30).copyProperties(image, ['system:time_start']);        //No clamping performed, may be a problem for outliers
                  // });

var sentinel1_DES = sentinel1.filterMetadata('orbitProperties_pass', 'equals', 'DESCENDING');
var sentinel1_AS = sentinel1.filterMetadata('orbitProperties_pass', 'equals', 'ASCENDING');





//////////////////////////// Processing sentinel1_AS /////////////////////////////////////////////////////////

// Composites
var months = ee.List.sequence(1, 331, 30);
var sentinel1_mosaics_unfiltered = ee.ImageCollection(months.map(function(m) {
  var time_period = sentinel1_AS.filter(ee.Filter.calendarRange({ 
    start: m,
    end: ee.Number(m).add(30),
    field: 'day_of_year'
  }));
  var composite = ee.Image(time_period.mean());
  return composite.set('system:time_start', m).clip(clip_feature);
}));

//Filters out images outside of current temporal scope
var sentinel1_AS_mosaics = sentinel1_mosaics_unfiltered.map(function(image) {
  return ee.Algorithms.If(ee.Number(image.bandNames().size().gt(0)), image.set('approved','true'), image.set('approved','false'));
}).filterMetadata('approved', 'equals', 'true').select(['VV', 'VH'], ['VV_AS', 'VH_AS']);


// Adding month to metadata
var sentinel1_AS_mosaics = sentinel1_AS_mosaics.map(function(image) {
  var number_of_month = ee.Number.parse(image.get('system:index')).add(ee.Number(1));
  return image.set('month', number_of_month);
});





//////////////////////////// Processing sentinel1_DES /////////////////////////////////////////////////////////

// Composites
var months = ee.List.sequence(1, 331, 30);
var sentinel1_mosaics_unfiltered = ee.ImageCollection(months.map(function(m) {
  var time_period = sentinel1_DES.filter(ee.Filter.calendarRange({ 
    start: m,
    end: ee.Number(m).add(30),
    field: 'day_of_year'
  }));
  var composite = ee.Image(time_period.mean());
  return composite.set('system:time_start', m).clip(clip_feature);
}));

//Filters out images outside of current temporal scope
var sentinel1_DES_mosaics = sentinel1_mosaics_unfiltered.map(function(image) {
  return ee.Algorithms.If(ee.Number(image.bandNames().size().gt(0)), image.set('approved','true'), image.set('approved','false'));
}).filterMetadata('approved', 'equals', 'true').select(['VV', 'VH'], ['VV_DES', 'VH_DES']);


// Adding month to metadata
var sentinel1_DES_mosaics = sentinel1_DES_mosaics.map(function(image) {
  var number_of_month = ee.Number.parse(image.get('system:index')).add(ee.Number(1));
  return image.set('month', number_of_month);
});






// Adding copying the April sentinel1_Des to fill in time-series gap for Jan-March
var sentinel1_DES_mosaics = sentinel1_DES_mosaics.merge(ee.ImageCollection([
  sentinel1_DES_mosaics.first().set('month', 1),
  sentinel1_DES_mosaics.first().set('month', 2),
  sentinel1_DES_mosaics.first().set('month', 3),
  sentinel1_DES_mosaics.first().set('month', 4)])) // OBS: Some areas might have April coverage








//Map.addLayer(sentinel1_DES_mosaics.filterMetadata('month', 'equals', 8), '', 'month 8')


/////////////////////////// Cloud Masking Sentinel 2  //////////////////////////////////////////////
// Original code: https://developers.google.com/earth-engine/tutorials/community/sentinel-2-s2cloudless

var AOI = clip_feature;
var START_DATE = start;
var END_DATE = end;
var CLOUD_FILTER = 20;         //Maximum image cloud cover percent allowed in image collection
var CLD_PRB_THRESH = 40;       //Cloud probability (%); values greater than are considered cloud
var NIR_DRK_THRESH = 0.20;     //Near-infrared reflectance; values less than are considered potential cloud shadow
var CLD_PRJ_DIST = 1;          //Maximum distance (km) to search for cloud shadows from cloud edges
var BUFFER = 50;               //Distance (m) to dilate the edge of cloud-identified objects



// Import and filter S2 SR.
// Loading s2cloudless collections based on predefined parameters
// Joining the two collections by adding a s2_cloudless_col image as a a property to the corresponding sen2 image

var s2_sr_col = sentinel2.filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE', CLOUD_FILTER));

var get_s2_sr_cld_col = function(aoi, start_date, end_date) {
    
    // Import and filter s2cloudless.
    var s2_cloudless_col = ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY')
        .filterBounds(aoi)
        .filterDate(start_date, end_date);

    // Join the filtered s2cloudless collection to the SR collection by the 'system:index' property.
    return ee.ImageCollection(ee.Join.saveFirst('s2cloudless').apply({
        'primary': s2_sr_col,
        'secondary': s2_cloudless_col,
        'condition': ee.Filter.equals({
            'leftField': 'system:index',
            'rightField': 'system:index'
          })
    }))};




//Apply the get_s2_sr_cld_col function to build a collection according to the parameters defined above.
//This produces a filtered Sentinel2 collection joined with the Sen2Cloudless images
var s2_sr_cld_col_eval = get_s2_sr_cld_col(AOI, START_DATE, END_DATE)



//Define cloud mask component functions
// adding cloud propability and is_cloud to each sen2 image

var add_cloud_bands = function(img) {

    // Get s2cloudless image, subset the probability band.
    var cld_prb = ee.Image(img.get('s2cloudless')).select('probability');

    // Condition s2cloudless by the probability threshold value
    var is_cloud = cld_prb.gt(CLD_PRB_THRESH).rename('clouds');

    // Add the cloud probability layer and cloud mask as image bands.
    return img.addBands(ee.Image([cld_prb, is_cloud]));
};



//Cloud shadow components

var add_shadow_bands = function(img) {
    
    // Identify water pixels from the SCL band.
    var not_water = img.select('SCL').neq(6);

    // Identify dark NIR pixels that are not water (potential cloud shadow pixels).
    var SR_BAND_SCALE = 1e4;
    var dark_pixels = img.select('B8').lt(NIR_DRK_THRESH*SR_BAND_SCALE).multiply(not_water).rename('dark_pixels');

    // Determine the direction to project cloud shadow from clouds (assumes UTM projection).
    var shadow_azimuth = ee.Number(90).subtract(ee.Number(img.get('MEAN_SOLAR_AZIMUTH_ANGLE')));

    // Project shadows from clouds for the distance specified by the CLD_PRJ_DIST input.
    var cld_proj = (img.select('clouds').directionalDistanceTransform(shadow_azimuth, CLD_PRJ_DIST*10)
        .reproject({'crs': img.select(0).projection(), 'scale': 100})
        .select('distance')
        .mask()
        .rename('cloud_transform'));

    // Identify the intersection of dark pixels with cloud shadow projection.
    var shadows = cld_proj.multiply(dark_pixels).rename('shadows');

    // Add dark pixels, cloud projection, and identified shadows as image bands.
    return img.addBands(ee.Image([dark_pixels, cld_proj, shadows]))};



//Final cloud-shadow mask

var add_cld_shdw_mask = function(img) {
    // Add cloud component bands.
    var img_cloud = add_cloud_bands(img);

    // Add cloud shadow component bands.
    var img_cloud_shadow = add_shadow_bands(img_cloud);

    // Combine cloud and shadow mask, set cloud and shadow as value 1, else 0.
    var is_cld_shdw = img_cloud_shadow.select('clouds').add(img_cloud_shadow.select('shadows')).gt(0);

    // Remove small cloud-shadow patches and dilate remaining pixels by BUFFER input.
    // 20 m scale is for speed, and assumes clouds don't require 10 m precision.
    var is_cld_shdw = (is_cld_shdw.focal_min(2).focal_max(BUFFER*2/20)
        .reproject({'crs': img.select([0]).projection(), 'scale': 20})
        .rename('cloudmask'));

    // Add the final cloud-shadow mask to the image.
    return img_cloud_shadow.addBands(is_cld_shdw);
};




// Apply cloud and cloud shadow mask
//Define cloud mask application function

var apply_cld_shdw_mask = function(img) {
    // Subset the cloudmask band and invert it so clouds/shadow are 0, else 1.
    var not_cld_shdw = img.select('cloudmask').not();

    // Subset reflectance bands and update their masks, return the result.
    // Selects all bands starting with B + the terrain shadow layer calcualted earlier
    return img.select('B.*').updateMask(not_cld_shdw);
};
//, 'shadow']
//Process the collection
var s2_cloudless = s2_sr_cld_col_eval.map(add_cld_shdw_mask).map(apply_cld_shdw_mask);



/////////////////////////// Comparing before and after cloud mask Indices on Sentinel 2  //////////////////////////////////////////////

// Map.addLayer(sentinel2.select(['B2','B3','B4'], ['blue', 'green', 'red']).first(), imageVisParam, 'Original', false)
// Map.addLayer(s2_cloudless.select(['B2','B3','B4'], ['blue', 'green', 'red']).first(), imageVisParam, 'Cloud Masked', false)





/////////////////////////// Calculating Indices on Sentinel 2  //////////////////////////////////////////////

var sentinel2 = s2_cloudless
                    .map(function(image) {
                    return image.addBands(image.normalizedDifference(['B8','B4']).select(['nd'], ['NDVI']));    //.addBands(image.metadata('system:time_start'))
                    })
                    .map(function(image) {
                    return image.addBands(image.normalizedDifference(['B3','B11']).select(['nd'], ['MNDWI']));
                    })
                    .select(['MNDWI','NDVI','B2','B3','B4', 'B8', 'B11','B12'],
                            ['MNDWI', 'NDVI', 'blue', 'green', 'red', 'nir', 'swir1', 'swir2']);

//Adding hillshadow as a band
//var sentinel2 = sentinel2.map(hillshadow);







////////////////// Mosaicing //////////////////////////

// Inspiration: https://code.earthengine.google.com/20ad3c83a17ca27b28640fb922819208


// Mosaic maker function (same code used for Sentinel 2)  - Inspiration: https://code.earthengine.google.com/20ad3c83a17ca27b28640fb922819208
var mosaick_maker = function(imageCollection, diff, temporalResolution, range, clip_feature){
  var temporal_composites = function(date, newlist) {
    date = ee.Date(date);
    newlist = ee.List(newlist);
    var filtered = imageCollection.filterDate(date, date.advance(temporalResolution, 'day'));
    var filtered_addedQA = filtered.map(function(image) {return image.addBands(image.metadata('system:time_start'))});
    var image = ee.Image(filtered_addedQA.median()).set('system:time_start', date).clip(clip_feature); //filtered_addedQA.first().get('system:time_start')); // date);      qualityMosaic('system:time_start'))                  //Change to qualityMosaic()
    return ee.List(ee.Algorithms.If(filtered.size(), newlist.add(image), newlist));
};
  var imageCollection_unfiltered = ee.ImageCollection(ee.List(range.iterate(temporal_composites, ee.List([]))));
  return imageCollection_unfiltered.limit(range.size().subtract(1), 'system:time_start');
};

// Mosaicking
var diff = end.difference(start, 'day');
var temporalResolution = 30; // days
var range = ee.List.sequence(0, diff.subtract(1), temporalResolution).map(function(day){return start.advance(day,'day')});
var sentinel2_mosaics = mosaick_maker(sentinel2, diff, temporalResolution, range, clip_feature);

// Adding month to metadata
var sentinel2_mosaics = sentinel2_mosaics.map(function(image) {
  var number_of_month = ee.Number.parse(image.get('system:index')).add(ee.Number(1));
  return image.set('month', number_of_month);
});

// Gap filling with constant value
var sentinel2_mosaics = sentinel2_mosaics.map(function(image) {
  return image.unmask(0);     //OBS: Selection bands deactivated .select(selection_bands)
});

//print('sentinel2_mosaics', sentinel2_mosaics);
//Map.addLayer(sentinel2_mosaics.first(), '', 'Comp 1', false)






////////////////////////////////// Layer Stacking ////////////////////////////////////////////

// Combine all image collections
var image_collection_raw = ee.ImageCollection(sentinel2_mosaics.select(['MNDWI', 'NDVI', 'blue', 'green', 'red', 'nir', 'swir1', 'swir2']))
.merge(ee.ImageCollection(sentinel1_AS_mosaics))
//.merge(ee.ImageCollection(sentinel1_DES_mosaics))
.merge(elevation.set('static', 'true')) // Setting a property to enable filtering later
.merge(slope.set('static', 'true'))
.merge(HAND.set('static', 'true'));



// Layer stack maker
var layer_stacker = function(image_collection) {
  var first = ee.Image(image_collection.first()).select([]);
  var appendBands = function(image, previous) {   //Previous = result of previous iteration, NOT previous image
    return ee.Image(previous).addBands(image);
  };
  return ee.Image(image_collection.iterate(appendBands, first));   //First is the starting image to be used as starting point for adding onto for each interation
};



var filtered_imgCol = image_collection_raw.filterMetadata('month', 'equals', 1) // OBS change to range
                          .merge(image_collection_raw.filterMetadata('static', 'equals', 'true'))



//print('700', ee.FeatureCollection('users/reachyemengis/water/JRC_sample_2019_700').filterMetadata('water', 'equals', 1).limit(10))
//print('500', ee.FeatureCollection('users/reachyemengis/water/JRC_sample_2019_500').filterMetadata('water', 'equals', 1).limit(10))



 
////////////////////////////////// Extracting training samples to training points  ////////////////////////////////////////////

// Loading training points
var training_points = ee.FeatureCollection('users/reachyemengis/point_samples/2019_1000_yem')
        .map(function(feature) {
          return feature.set('class', feature.get('water')) // Setting the class parameter
          })
          .filterBounds(clip_feature).filterMetadata('class', 'not_equals', 0) // Filtering out 
          //.limit(1000) // OBS REMOVE LIMIT!


// Export.table.toDrive(training_points)
// print('original training points', training_points.limit(10))

var training_points = training_points.merge(ee.FeatureCollection(agri_water_errors))
.merge(ee.FeatureCollection(certain_comission_errors))
.merge(ee.FeatureCollection(costal_land))

print(training_points.size())

// print('costal_land', costal_land)
// print('agri_water_errors', agri_water_errors)
// print('certain_comission_errors', certain_comission_errors)

var image_combiner = function(imageCollection, featureCollection, range){
  
  //Filters an image collectiom, produces a subset and adds it to a list (this function is later iterated over the an image collection)
  var temporal_composites = function(range, list) {
    //newlist = ee.List(newlist);
    var filtered_imgCol = imageCollection.filterMetadata('month', 'equals', range)
                          .merge(image_collection_raw.filterMetadata('static', 'equals', 'true'))
    var filtered_fC = featureCollection.filterMetadata('month', 'equals', range)
    var layer_stack = layer_stacker(filtered_imgCol);
    
    // Sampling from one image
    var sample = layer_stack.sampleRegions({
      collection: filtered_fC,
      scale: 10, 
      geometries: true})
  
    //return ee.ImageCollection(list).merge(ee.ImageCollection(filtered))
    return ee.FeatureCollection(list).merge(sample)
    //return ee.Listfiltered//ee.List(newlist).add(filtered);
};

// Iterates the function above over a list of numbers signifying months
  return range.iterate(temporal_composites, ee.FeatureCollection([]));
};

var range = ee.List.sequence(1, 12, 1)
var training_sample = image_combiner(image_collection_raw, training_points, range);


// Generic Function to remove a property from a feature
var removeProperty = function(feature, property) {
  var properties = ee.Feature(feature).propertyNames()
  var selectProperties = properties.filter(ee.Filter.neq('item', property))
  return feature.select(selectProperties)
}

// Removing property: water
var training_sample = ee.FeatureCollection(training_sample).map(function(feature) {
  return removeProperty(feature,'water')})

// Removing property: month
var training_sample = ee.FeatureCollection(training_sample).map(function(feature) {
  return removeProperty(feature,'month')})
  


//Export.table.toAsset(training_sample, 'feature_sample_2019_1000_yem_v11', 'users/reachyemengis/feature_samples/2019_1000_yem_v11')

var training_sample = ee.FeatureCollection(table11)

//.map(function(feature) {
// return ee.Feature(feature).propertyNames().remove('classification')
// })

// print(training_sample.first())

//print(training_sample.first().propertyNames().remove(['system:index','classification'])) //.remove('classification'))

////////////////////////////////// Training and Classification ////////////////////////////////////////////


var classifier = ee.Classifier.smileRandomForest(500);
var trained_classifier = classifier.train(training_sample, 'class', training_sample.first().propertyNames().remove('system:index').remove('classification')); // .first().propertyNames().remove('system:index')


// var trainAccuracy = trained_classifier.confusionMatrix();
// print('Resubstitution error matrix: ', trainAccuracy);
// print('Training overall accuracy: ', trainAccuracy.accuracy());
// print('PA: ', trainAccuracy.producersAccuracy());
// print('UA: ', trainAccuracy.consumersAccuracy());

// Error: Image.classify: The image to be classified does not contain all the bands which the classifier expects. 
// Image bands: [MNDWI, NDVI, blue, green, red, nir, swir1, swir2, VV_AS, VH_AS, elevation, slope, hnd]. 
// Classifier inputs: [elevation, VH_AS, green, swir1, swir2, slope, classification, NDVI, red, MNDWI, blue, VV_AS, nir, system:index, hnd].
// Missing bands: [classification, system:index].

//var id = 1
var base = 'users/reachyemengis/water_export8/water'
var year = '2020_'


// var image_collection_month = image_collection_raw.filterMetadata('month', 'equals', id)
//                             .merge(image_collection_raw.filterMetadata('static', 'equals', 'true'))
// var layer_stack = layer_stacker(image_collection_month)
// var classified_image = layer_stack.classify(trained_classifier).clip(clip_feature);

// // Export classification
// Export.image.toAsset({
//   image: classified_image,
//   description: year.concat(id.toString()),
//   assetId: base.concat(year).concat(id),//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
//   scale: 10,
//   region: clip_feature,
//   maxPixels: 2000000000000
// });



// var range = [1,2,3,4,5,6,7,8,9,10,11,12,13]
// //var range = [1, 2, 3, 4, 5]

// var i;
// for (i = 1; i < range.length; i++) {

//   var id = i


//   var image_collection_month = image_collection_raw.filterMetadata('month', 'equals', id)
//                               .merge(image_collection_raw.filterMetadata('static', 'equals', 'true'))
//   var layer_stack = layer_stacker(image_collection_month)
//   var classified_image = layer_stack.classify(trained_classifier).clip(clip_feature);
  
  
  
//   Export.image.toAsset({
//   image: classified_image,
//   description: year.concat(id.toString()),
//   assetId: base.concat(year).concat(id),//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
//   scale: 10,
//   region: clip_feature,
//   maxPixels: 2000000000000
// });

// }














///////////////////////////////////// Reviewing previous outputs ////////////////////////////////////////////


// var previous = ee.Image('users/reachyemengis/water_export2/water2019_1')

// Map.addLayer(previous)

// var mask = previous.eq(2);
// var output = previous.mask(mask);
// Map.addLayer(sentinel2_mosaics.filterMetadata('month', 'equals', 1), imageVisParam6, 'Sentinel-2 Mosaick - 1');
// Map.addLayer(output, waterVis, 'Classified Water 1')


// var previous = ee.Image('users/reachyemengis/water_export2/water2019_2')
// Map.addLayer(previous)
// var mask = previous.eq(2);
// var output = previous.mask(mask);
// Map.addLayer(sentinel2_mosaics.filterMetadata('month', 'equals', 2), imageVisParam6, 'Sentinel-2 Mosaick - 2');
// Map.addLayer(output, waterVis, 'Classified Water 2')


// var previous = ee.Image('users/reachyemengis/water_export2/water2019_3')
// Map.addLayer(previous)
// var mask = previous.eq(2);
// var output = previous.mask(mask);
// Map.addLayer(sentinel2_mosaics.filterMetadata('month', 'equals', 3), imageVisParam6, 'Sentinel-2 Mosaick - 3');
// Map.addLayer(output, waterVis, 'Classified Water 3')


// var previous = ee.Image('users/reachyemengis/water_export6/water2020_7')
// //Map.addLayer(previous, '', 'previous')
// var mask = previous.eq(3);
// var output = previous.mask(mask);
// Map.addLayer(sentinel2_mosaics.filterMetadata('month', 'equals', 7), imageVisParam6, 'Sentinel-2 Mosaick - 7');
// Map.addLayer(output, waterVis, 'Classified Water 7')
 

// var previous = ee.Image('users/reachyemengis/water_export5/water2020_12')
// //Map.addLayer(previous, '', 'previous')
// var mask = previous.eq(3);
// var output = previous.mask(mask);
// Map.addLayer(sentinel2_mosaics.filterMetadata('month', 'equals', 12), imageVisParam6, 'Sentinel-2 Mosaick - 12');
// Map.addLayer(output, waterVis, 'Classified Water 12')


// var previous = ee.Image('users/reachyemengis/water_export5/water2020_3')
// //Map.addLayer(previous, '', 'previous')
// var mask = previous.eq(3);
// var output = previous.mask(mask);
// Map.addLayer(sentinel2_mosaics.filterMetadata('month', 'equals', 3), imageVisParam6, 'Sentinel-2 Mosaick - 3');
// Map.addLayer(output, waterVis, 'Classified Water 3')



// var previous = ee.Image('users/reachyemengis/water_export5/water2020_1')
// //Map.addLayer(previous, '', 'previous')
// var mask = previous.eq(3);
// var output = previous.mask(mask);
// Map.addLayer(sentinel2_mosaics.filterMetadata('month', 'equals', 1), imageVisParam6, 'Sentinel-2 Mosaick - 1');
// Map.addLayer(output, waterVis, 'Classified Water 1')








 

// // Export classification
// Export.image.toAsset({
//   image: previous,
//   scale: 10,
//   region: clip_feature,
//   maxPixels: 2000000000000
// });





// var previous = ee.Image('users/reachyemengis/water/water_map_v5');

// // Create a mask
// var mask = previous.eq(1);

// // Apply the mask to the image. This filteres out everything except the pixels covered by the mask
// var output = previous.mask(mask);

// // Map.addLayer(sentinel2_mosaics.filterMetadata('month', 'equals', 9), imageVisParam6, 'Sentinel-2 Mosaick - Sep');

// // Map.addLayer(output, waterVis, 'Classified Water Sep')















// ////////////////////////////////// Comparing to JRC ////////////////////////////////////////////

// var dataset = ee.ImageCollection('JRC/GSW1_2/MonthlyHistory')
//               .filterMetadata('year', 'equals', 2019).filterMetadata('month', 'equals', 1).first();


// var visualization = {
//   bands: ['water'],
//   min: 0.0,
//   max: 2.0,
//   palette: ['ffffff', 'fffcb8', '0905ff']
// };


// // Create a mask
// var mask = dataset.eq(2);

// // Apply the mast to the image. This filteres out everything except the pixels covered by the mask
// var output = dataset.mask(mask);




// Map.addLayer(dataset.filterMetadata('year', 'equals', 2015).filterMetadata('month', 'equals', 12), visualization, 'Water 1');

//Map.addLayer(output, imageVisParam, 'Water 1');
// Map.addLayer(dataset.filterMetadata('year', 'equals', 2019).filterMetadata('month', 'equals', 3), visualization, 'Water 3');
// Map.addLayer(dataset.filterMetadata('year', 'equals', 2019).filterMetadata('month', 'equals', 5), visualization, 'Water 5');
// Map.addLayer(dataset.filterMetadata('year', 'equals', 2019).filterMetadata('month', 'equals', 7), visualization, 'Water 7');
// Map.addLayer(dataset.filterMetadata('year', 'equals', 2019).filterMetadata('month', 'equals', 9), visualization, 'Water 9');
// Map.addLayer(dataset.filterMetadata('year', 'equals', 2019).filterMetadata('month', 'equals', 12), visualization, 'Water 12');








// var range = [1,2,3,4,5,6,7,8,9,10,11,12]
// //var range = [1, 2, 3, 4, 5]

// var i;
// for (i = 1; i < range.length; i++) {

//   var id = i


//   // var image_collection_month = image_collection_raw.filterMetadata('month', 'equals', id)
//   //                             .merge(image_collection_raw.filterMetadata('static', 'equals', 'true'))
//   // var layer_stack = layer_stacker(image_collection_month)
//   // var classified_image = layer_stack.classify(trained_classifier).clip(clip_feature);
  
  
//   Export.image.toAsset({
//   image: sentinel1_DES_mosaics.filterMetadata('month', 'equals', id).first(),
//   description: ee.String('sen1_dec').concat(id.toString()),
//   assetId: ee.String('sen1_dec').concat(id.toString()),//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
//   scale: 1000,
//   region: clip_feature,
//   maxPixels: 2000000000000
// });

// }

  
//   Export.image.toAsset({
//   image: classified_image,
//   description: year.concat(id.toString()),
//   assetId: base.concat(year).concat(id),//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
//   scale: 10,
//   region: clip_feature,
//   maxPixels: 2000000000000
// });

// }



  
// Export.image.toAsset({
// image: sentinel1_DES_mosaics.filterMetadata('month', 'equals', 1).first(),
// description: 'month_1',
// assetId: 'month_1',//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
// scale: 1000,
// region: clip_feature,
// maxPixels: 2000000000000})

// Export.image.toAsset({
// image: sentinel1_DES_mosaics.filterMetadata('month', 'equals', 2).first(),
// description: 'month_2',
// assetId: 'month_2',//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
// scale: 1000,
// region: clip_feature,
// maxPixels: 2000000000000})

// Export.image.toAsset({
// image: sentinel1_DES_mosaics.filterMetadata('month', 'equals', 3).first(),
// description: 'month_3',
// assetId: 'month_3',//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
// scale: 1000,
// region: clip_feature,
// maxPixels: 2000000000000})

// Export.image.toAsset({
// image: sentinel1_DES_mosaics.filterMetadata('month', 'equals', 4).first(),
// description: 'month_4',
// assetId: 'month_4',//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
// scale: 1000,
// region: clip_feature,
// maxPixels: 2000000000000})

// Export.image.toAsset({
// image: sentinel1_DES_mosaics.filterMetadata('month', 'equals', 5).first(),
// description: 'month_5',
// assetId: 'month_5',//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
// scale: 1000,
// region: clip_feature,
// maxPixels: 2000000000000})

// Export.image.toAsset({
// image: sentinel1_DES_mosaics.filterMetadata('month', 'equals', 6).first(),
// description: 'month_6',
// assetId: 'month_6',//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
// scale: 1000,
// region: clip_feature,
// maxPixels: 2000000000000})

// Export.image.toAsset({
// image: sentinel1_DES_mosaics.filterMetadata('month', 'equals', 7).first(),
// description: 'month_7',
// assetId: 'month_7',//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
// scale: 1000,
// region: clip_feature,
// maxPixels: 2000000000000})

// Export.image.toAsset({
// image: sentinel1_DES_mosaics.filterMetadata('month', 'equals', 8).first(),
// description: 'month_8',
// assetId: 'month_8',//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
// scale: 1000,
// region: clip_feature,
// maxPixels: 2000000000000})

// Export.image.toAsset({
// image: sentinel1_DES_mosaics.filterMetadata('month', 'equals', 9).first(),
// description: 'month_9',
// assetId: 'month_9',//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
// scale: 1000,
// region: clip_feature,
// maxPixels: 2000000000000})

// Export.image.toAsset({
// image: sentinel1_DES_mosaics.filterMetadata('month', 'equals', 10).first(),
// description: 'month_10',
// assetId: 'month_10',//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
// scale: 1000,
// region: clip_feature,
// maxPixels: 2000000000000})

// Export.image.toAsset({
// image: sentinel1_DES_mosaics.filterMetadata('month', 'equals', 11).first(),
// description: 'month_11',
// assetId: 'month_11',//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
// scale: 1000,
// region: clip_feature,
// maxPixels: 2000000000000})

// Export.image.toAsset({
// image: sentinel1_DES_mosaics.filterMetadata('month', 'equals', 12).first(),
// description: 'month_12',
// assetId: 'month_12',//ee.String(ee.String('users/reachyemengis/water/').cat(ee.String('water').cat(id))).toString(),
// scale: 1000,
// region: clip_feature,
// maxPixels: 2000000000000})











///////////////////// Accuracy Assessment


// // Sample the input imagery to get a FeatureCollection of training data.
// var sample = input.addBands(modis).sample({
//   region: landsat.geometry(),
//   numPixels: 5000,
//   seed: 0,
//   geometries: true,
//   tileScale: 16
// });

// The randomColumn() method will add a column of uniform random
// numbers in a column named 'random' by default.
var sample = training_sample.randomColumn();

var split = 0.1;  // Roughly 70% training, 30% testing.
var training = sample.filter(ee.Filter.lt('random', split));
print(training.size())
var validation = sample.filter(ee.Filter.gte('random', split));
print(validation.size())

// // Spatial join.
// var distFilter = ee.Filter.withinDistance({
//   distance: 1000,
//   leftField: '.geo',
//   rightField: '.geo',
//   maxError: 10
// });

// var join = ee.Join.inverted();

// // Apply the join.
// training = join.apply(training, validation, distFilter);
// print(training)



var classifier = ee.Classifier.smileRandomForest(500);

var trained_classifier = classifier.train(training, 'class', training_sample.first().propertyNames().remove('system:index').remove('classification')); // .first().propertyNames().remove('system:index')

var result = validation.classify(trained_classifier)



var trainAccuracy = trained_classifier.confusionMatrix();
print('Resubstitution error matrix: ', trainAccuracy);
print('Training overall accuracy: ', trainAccuracy.accuracy());
print('PA: ', trainAccuracy.producersAccuracy());
print('UA: ', trainAccuracy.consumersAccuracy());
